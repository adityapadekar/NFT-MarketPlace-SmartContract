{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed approved,\n        uint256 indexed tokenId\n    );\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(\n        uint256 tokenId\n    ) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(\n        address owner,\n        address operator\n    ) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/NFTMarketPlace.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.8;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n// Errors\nerror NFTMarketPlace__PriceMustBeAboveZero();\nerror NFTMarketPlace__NotApprovedForMarketPlace();\nerror NFTMarketPlace__AlreadyListed(address nftAddress, uint256 tokenId);\nerror NFTMarketPlace__NotOwner();\nerror NFTMarketPlace__NotListed(address nftAddress, uint256 tokenId);\nerror NFTMarketPlace__PriceNotMet(\n    address nftAddress,\n    uint256 tokenId,\n    uint256 price\n);\nerror NFTMarketPlace__NoProceeds();\nerror NFTMarketPlace__WithdrawFailed();\n\ncontract NFTMarketPlace {\n    // types\n    struct Listing {\n        uint256 price;\n        address seller;\n    }\n\n    // events\n    event itemListed(\n        address indexed seller,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n\n    // events\n    event itemBought(\n        address indexed buyer,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n\n    // events\n    event ItemCanceled(\n        address indexed seller,\n        address indexed nftAddress,\n        uint256 indexed tokenId\n    );\n\n    // NFT contract address -> NFT tokenId -> Listing\n    mapping(address => mapping(uint256 => Listing)) private s_listings;\n\n    // Seller Address -> Amount earned\n    mapping(address => uint256) private s_proceeds;\n\n    // modifiers\n    modifier notListed(\n        address _nftAddress,\n        uint256 _tokenId,\n        address _owner\n    ) {\n        Listing memory listing = s_listings[_nftAddress][_tokenId];\n\n        if (listing.price > 0)\n            revert NFTMarketPlace__AlreadyListed(_nftAddress, _tokenId);\n\n        _;\n    }\n\n    modifier isListed(address _nftAddress, uint256 _tokenId) {\n        Listing memory listing = s_listings[_nftAddress][_tokenId];\n\n        if (listing.price <= 0)\n            revert NFTMarketPlace__NotListed(_nftAddress, _tokenId);\n\n        _;\n    }\n\n    modifier isOwner(\n        address _nftAddress,\n        uint256 _tokenId,\n        address _spender\n    ) {\n        IERC721 nft = IERC721(_nftAddress);\n        address owner = nft.ownerOf(_tokenId);\n\n        if (_spender != owner) revert NFTMarketPlace__NotOwner();\n\n        _;\n    }\n\n    function listItem(\n        address _nftAddress,\n        uint256 _tokenId,\n        uint256 _price\n    )\n        external\n        notListed(_nftAddress, _tokenId, msg.sender)\n        isOwner(_nftAddress, _tokenId, msg.sender)\n    {\n        if (_price <= 0) revert NFTMarketPlace__PriceMustBeAboveZero();\n\n        IERC721 nft = IERC721(_nftAddress);\n\n        if (nft.getApproved(_tokenId) != address(this))\n            revert NFTMarketPlace__NotApprovedForMarketPlace();\n\n        s_listings[_nftAddress][_tokenId] = Listing(_price, msg.sender);\n\n        emit itemListed(msg.sender, _nftAddress, _tokenId, _price);\n    }\n\n    function buyItem(\n        address _nftAddress,\n        uint256 _tokenId\n    ) external payable isListed(_nftAddress, _tokenId) {\n        Listing memory listing = s_listings[_nftAddress][_tokenId];\n        if (msg.value != listing.price)\n            revert NFTMarketPlace__PriceNotMet(\n                _nftAddress,\n                _tokenId,\n                listing.price\n            );\n\n        s_proceeds[listing.seller] += msg.value;\n\n        delete (s_listings[_nftAddress][_tokenId]);\n\n        IERC721(_nftAddress).safeTransferFrom(\n            listing.seller,\n            msg.sender,\n            _tokenId\n        );\n\n        emit itemBought(msg.sender, _nftAddress, _tokenId, listing.price);\n    }\n\n    function cancelListing(\n        address _nftAddress,\n        uint256 _tokenId\n    )\n        external\n        isOwner(_nftAddress, _tokenId, msg.sender)\n        isListed(_nftAddress, _tokenId)\n    {\n        delete s_listings[_nftAddress][_tokenId];\n\n        emit ItemCanceled(msg.sender, _nftAddress, _tokenId);\n    }\n\n    function updateListing(\n        address _nftAddress,\n        uint256 _tokenId,\n        uint256 _newPrice\n    )\n        external\n        isOwner(_nftAddress, _tokenId, msg.sender)\n        isListed(_nftAddress, _tokenId)\n    {\n        s_listings[_nftAddress][_tokenId].price = _newPrice;\n\n        emit itemListed(msg.sender, _nftAddress, _tokenId, _newPrice);\n    }\n\n    function withdrawProceeds() external {\n        uint256 proceeds = s_proceeds[msg.sender];\n\n        if (proceeds <= 0) revert NFTMarketPlace__NoProceeds();\n\n        s_proceeds[msg.sender] = 0;\n\n        (bool success, ) = payable(msg.sender).call{value: proceeds}(\"\");\n\n        if (!success) revert NFTMarketPlace__WithdrawFailed();\n    }\n\n    function getListing(\n        address _nftAddress,\n        uint256 _tokenId\n    ) external view returns (Listing memory) {\n        return s_listings[_nftAddress][_tokenId];\n    }\n\n    function getProceeds(address _seller) external view returns (uint256) {\n        return s_proceeds[_seller];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}